{"0": {
    "doc": "Home",
    "title": "Home",
    "content": "Hi, it's Abdullah. I am a software engineer from Turkey :tr:. I'm mainly focused on Rust, async programming and distributed systems right now. I like dealing with hard problems, doing optimization and sharing my knowledge. Purpose of this website is to improve myself by sharing my knowledge and help others to improve themselves. Please feel free to contact me :). ",
    "url": "/",
    "relUrl": "/"
  },"1": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": "# Introduction I followed the first edition of [phil-opp's series](https://os.phil-opp.com/multiboot-kernel/). I didn't want to go with the newest version because it uses a helper tool that does too much. After I understand and experiment with the booting process, I'm gonna switch to the new version though. So, today's gainings are: - I skimmed through the [Multiboot Specification](https://nongnu.askapache.com/grub/phcoder/multiboot.pdf) and implement a simple Multiboot header in assembly. - I was familiar with assembly, and binary analysis tools like hexdump, objdump, etc. So I refreshed my knowledge about them. - I wrote my first linker script. I wasn't aware of they exist and it was cool. I wrote the below script, which defines the entry point as `start`, sets the load address of the first section to 1 MiB, and puts the multiboot header and the os code in order. One important thing is to run `ld` command with the parameter `-n` to disable the automatic section alignment. Otherwise the grub may not be able to find the Multiboot header. ``` ENTRY(start) SECTIONS { . = 1M; .boot : { /* ensure that the multiboot header is at the beginning */ *(.multiboot_header) } .text : { *(.text) } } ``` - I wrote a simple `grub` configuration file and generate an `iso` file. - I ran this simples OS possible in `qemu`. But since I use my Linux computer over ssh, I used `curses` instead of the GUI. I achieved this by running. ``` qemu-system-x86_64 -cdrom os.iso -curses -monitor stdio ``` `monitor` is used to be able to input commands to `qemu`. Otherwise you won't be able to exit from it. - I automate the build process by using `make`. - After understanding what's going on, I rewrote everything from scratch to have a more clear understanding. ## Next Step I will continue with [Entering Long Mode](https://os.phil-opp.com/entering-longmode/) post. ",
    "url": "/docs/os-dev-journey/introduction.html",
    "relUrl": "/docs/os-dev-journey/introduction.html"
  },"2": {
    "doc": "OS Dev Journey",
    "title": "OS Dev Journey",
    "content": "# My Operating System Development Journey I love to learn how things really work and build things from scratch. Since I am interested in virtualization, operating systems and work as an embedded software engineer, I wanted to give this a go. I made some research and prepared a plan for this. ## Gameplan First of all, O.S. development is a huge task and it won't be like \"making a to-do app from scratch\". There are many complex and low-level concepts that I need to learn, understand and experiment with. So I created a Trello page to note things that I should learn, or improve my knowledge. Secondly, writing about what I learned motivates me and makes it much more easier to things that I have done so far. So I will keep this blog up-to-date as much as possible. And finally, let's talk about the actual learning part. At first, I am planning to follow the [phill-opp's os development series](https://os.phil-opp.com). I think this series will give me not in-depth but good understanding of how things work. Since it is practical, and written mostly in Rust, I probably will enjoy this a lot. Then I think, I will proceed with [this course](https://www.educative.io/courses/operating-systems-virtualization-concurrency-persistence) which follows [this book](https://pages.cs.wisc.edu/~remzi/OSTEP/#book-chapters). While I follow these resources, I am gonna try to implement things by myself and experiment with different things. And of course, I will read and follow other great resources and documentations as well like the amazing [os-dev website](https://wiki.osdev.org). Let the journey begin! ",
    "url": "/blog/os-dev-journey",
    "relUrl": "/blog/os-dev-journey"
  }
}
